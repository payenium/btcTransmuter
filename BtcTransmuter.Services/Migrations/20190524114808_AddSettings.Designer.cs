// <auto-generated />
using System;
using BtcTransmuter.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BtcTransmuter.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190524114808_AddSettings")]
    partial class AddSettings
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("BtcTransmuter.Data.Entities.ExternalServiceData", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DataJson");

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExternalServices");
                });

            modelBuilder.Entity("BtcTransmuter.Data.Entities.Recipe", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("Enabled");

                    b.Property<string>("Name");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("BtcTransmuter.Data.Entities.RecipeAction", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionId");

                    b.Property<string>("DataJson");

                    b.Property<string>("ExternalServiceId");

                    b.Property<int>("Order");

                    b.Property<string>("RecipeActionGroupId");

                    b.Property<string>("RecipeId");

                    b.HasKey("Id");

                    b.HasIndex("ExternalServiceId");

                    b.HasIndex("RecipeActionGroupId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeActions");
                });

            modelBuilder.Entity("BtcTransmuter.Data.Entities.RecipeActionGroup", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RecipeId");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeActionGroups");
                });

            modelBuilder.Entity("BtcTransmuter.Data.Entities.RecipeInvocation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionResult");

                    b.Property<string>("RecipeActionId");

                    b.Property<string>("RecipeId");

                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("TriggerDataJson");

                    b.HasKey("Id");

                    b.HasIndex("RecipeActionId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeInvocations");
                });

            modelBuilder.Entity("BtcTransmuter.Data.Entities.RecipeTrigger", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DataJson");

                    b.Property<string>("ExternalServiceId");

                    b.Property<string>("RecipeId");

                    b.Property<string>("TriggerId");

                    b.HasKey("Id");

                    b.HasIndex("ExternalServiceId");

                    b.HasIndex("RecipeId")
                        .IsUnique();

                    b.ToTable("RecipeTriggers");
                });

            modelBuilder.Entity("BtcTransmuter.Data.Entities.Settings", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DataJson");

                    b.Property<string>("Key");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("BtcTransmuter.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BtcTransmuter.Data.Entities.ExternalServiceData", b =>
                {
                    b.HasOne("BtcTransmuter.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BtcTransmuter.Data.Entities.Recipe", b =>
                {
                    b.HasOne("BtcTransmuter.Data.Entities.User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BtcTransmuter.Data.Entities.RecipeAction", b =>
                {
                    b.HasOne("BtcTransmuter.Data.Entities.ExternalServiceData", "ExternalService")
                        .WithMany("RecipeActions")
                        .HasForeignKey("ExternalServiceId");

                    b.HasOne("BtcTransmuter.Data.Entities.RecipeActionGroup", "RecipeActionGroup")
                        .WithMany("RecipeActions")
                        .HasForeignKey("RecipeActionGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BtcTransmuter.Data.Entities.Recipe", "Recipe")
                        .WithMany("RecipeActions")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BtcTransmuter.Data.Entities.RecipeActionGroup", b =>
                {
                    b.HasOne("BtcTransmuter.Data.Entities.Recipe", "Recipe")
                        .WithMany("RecipeActionGroups")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BtcTransmuter.Data.Entities.RecipeInvocation", b =>
                {
                    b.HasOne("BtcTransmuter.Data.Entities.RecipeAction", "RecipeAction")
                        .WithMany("RecipeInvocations")
                        .HasForeignKey("RecipeActionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BtcTransmuter.Data.Entities.Recipe", "Recipe")
                        .WithMany("RecipeInvocations")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BtcTransmuter.Data.Entities.RecipeTrigger", b =>
                {
                    b.HasOne("BtcTransmuter.Data.Entities.ExternalServiceData", "ExternalService")
                        .WithMany("RecipeTriggers")
                        .HasForeignKey("ExternalServiceId");

                    b.HasOne("BtcTransmuter.Data.Entities.Recipe", "Recipe")
                        .WithOne("RecipeTrigger")
                        .HasForeignKey("BtcTransmuter.Data.Entities.RecipeTrigger", "RecipeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BtcTransmuter.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BtcTransmuter.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BtcTransmuter.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BtcTransmuter.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
