@model BtcTransmuter.Extension.NBXplorer.Controllers.WalletCreatorController.GetWalletViewModel
@{
    ViewData["Title"] = $"Generate/View {Model.Network.CryptoCode} Wallet";
}

<div class="d-flex justify-content-between">


    <h2>@ViewData["Title"]</h2>
    <div>
        @foreach (var cryptoCode in Model.CryptoCodes)
        {
            <a asp-action="GetWallet" asp-route-cryptoCode="@cryptoCode" asp-route-mnemonic="" class="btn btn-secondary btn-sm mr-2">Generate new @cryptoCode wallet</a>
        }
    </div>
</div>


<div class="card">
    <div class="card-body">
        <div class="form-group">
            <label class="control-label">Mnemonic Seed</label>
            <form class="input-group" method="post" asp-action="GetWallet" asp-route-cryptoCode="@Model.CryptoCode">
                <input asp-for="Mnemonic" class="form-control"/>
                <div class="input-group-append">
                    <button type="submit" class="btn btn-secondary">Load</button>
                </div>
            </form>
        </div>
        <div class="form-group">
            <label class="control-label">Master Private Key</label>
            <input readonly class="form-control" value="@Model.PrivateKey.ToString(Model.Network.NBitcoinNetwork)"/>
        </div>
        <div class="form-group">
            <label class="control-label">Wallet Import Format(WIF)</label>
            <input readonly class="form-control" value="@Model.WIF.ToString()>"/>
        </div>
        <div class="form-group">
            <label class="control-label">Master Extended Public key</label>
            <input readonly class="form-control" value="@Model.ExtPubKey"/>
        </div>
        <div class="form-group">
            <label class="control-label">Root Fingerprint</label>
            <input readonly class="form-control" value="@Model.Fingerprint"/>
        </div>
        <div class="card">
            <nav>
                <div class="nav nav-tabs nav-fill" id="nav-tab" role="tablist">
                    @for (int i = 0; i < Model.AddressTypes.Count; i++)
                    {
                        var item = Model.AddressTypes.ElementAt(i);
                        <a class="nav-item nav-link @(i == 0 ? "active" : "")" href="#tab-hd-@item.Key" id="nav-hd-@item.Key" data-toggle="tab" h role="tab">@item.Key</a>
                    }

                    <a class="nav-item nav-link" href="#tab-singular" id="nav-singular" data-toggle="tab" role="tab">Singular Addresses</a>
                </div>
            </nav>
            <div class="tab-content py-3 px-3 px-sm-0">
                @for (int i = 0; i < Model.AddressTypes.Count; i++)
                {
                    var item = Model.AddressTypes.ElementAt(i);
                    <div class="tab-pane p-2 @(i == 0 ? "show active" : "")" id="tab-hd-@item.Key" role="tabpanel" id="tab-hd-@item.Key">
                        <div class="form-group">
                            <label class="control-label">@item.Value.Description</label>
                            <input readonly class="form-control" value="@item.Value.DerivationScheme"/>
                        </div>
                        <div class="form-group">
                            <label class="control-label">Account Key Path</label>
                            <input readonly class="form-control" value="@item.Value.RootKeyPath"/>
                        </div>
                        <div class="form-group">
                            <table class="table table-sm table-responsive-md">
                                <thead>
                                <tr>
                                    <th>Key path</th>
                                    <th>Address</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var sample in item.Value.Addresses)
                                {
                                    <tr>
                                        <td>
                                            <span class="text-muted ">@item.Value.RootKeyPath/</span>@sample.Key</td>
                                        <td>@sample.Value</td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }

                <div class="tab-pane p-2" id="tab-singular" role="tabpanel">
                    <div class="form-group">
                        <label class="control-label">Root Legacy Address</label>
                        <input readonly class="form-control" value="@Model.Address"/>
                    </div>
                    @if (Model.Network.NBitcoinNetwork.Consensus.SupportSegwit)
                    {
                        <div class="form-group">
                            <label class="control-label">Root Segwit Address</label>
                            <input readonly class="form-control" value="@Model.SegwitAddress"/>
                        </div>
                        <div class="form-group">
                            <label class="control-label">Root Segwit-P2SH Address</label>
                            <input readonly class="form-control" value="@Model.P2SHAddress"/>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>