`
@using BtcTransmuter.Extension.BtcPayServer.ExternalServices.BtcPayServer
@using BtcTransmuter.Extension.Exchange.ExternalServices.Exchange
@using NBitcoin
@model BtcTransmuter.Extension.Presets.CreateFiatExchangeConversionViewModel

@{
    ViewData["Title"] = "Create Fiat Exchange conversion";
}

<h2>@ViewData["Title"]</h2>


<form method="post">
    <div asp-validation-summary="All" class="text-danger"></div>

    <div class="card  mb-2">
        <div class="card-body">
            <h5 class="card-title">Choose your BTCPay store</h5>
            <div class="form-group">
                @if (!Model.BTCPayServices.Any())
                {
                    <span class="text-danger">
                        There are no BTCPay stores connected to your Transmuter account.

                        <a asp-controller="ExternalServices" asp-action="CreateExternalService" asp-route-selectedType="@BtcPayServerService.BtcPayServerServiceType">Please create one first.</a>
                    </span>
                }
                else
                {
                    <select asp-for="SelectedBTCPayExternalServiceId" asp-items="Model.BTCPayServices" class="form-control"></select>
                    
                    <a asp-controller="ExternalServices" asp-action="CreateExternalService" asp-route-selectedType="@BtcPayServerService.BtcPayServerServiceType">Create</a>
                }
                <span asp-validation-for="SelectedBTCPayExternalServiceId" class="text-danger"></span>
            </div>

        </div>
    </div>

    <div class="card  mb-2">
        <div class="card-body">
            <h5 class="card-title">When do you want to execute the trade?</h5>
            <div class="form-group">
                <label asp-for="Status" class="control-label"></label>
                <select asp-for="Status" asp-items="@(new SelectList(BtcTransmuter.Extension.BtcPayServer.Triggers.InvoiceStatusChanged.InvoiceStatusChangedController.AllowedStatuses, "Value", "Text", Model.Status))" class="form-control"></select>
                <span asp-validation-for="Status" class="text-danger"></span>
            </div>
        </div>
    </div>
    <div class="list-group mb-2">
        <div class="list-group-item ">
            <h5 class="mb-1">Set up your trading conditions</h5>
        </div>
        @if (!Model.ExchangeServices.Any())
        {
            <div class="list-group-item ">
                <span class="text-danger">
                    There are no Exchange services connected to your Transmuter account.

                    <a asp-controller="ExternalServices" asp-action="CreateExternalService" asp-route-selectedType="@ExchangeService.ExchangeServiceType">Please create one first.</a>
                </span>
            </div>
        }
        else
        {
            @for (var index = 0; index < Model.Conditions.Count; index++)
            {
                <div class="list-group-item justify-content-between align-items-center">
                    <div>

                        <div class="form-group">
                            <label asp-for="Conditions[index].CryptoCode" class="control-label"></label>
                            <input asp-for="Conditions[index].CryptoCode" class="form-control" placeholder="BTC"/>
                            <span asp-validation-for="Conditions[index].CryptoCode" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="Conditions[index].ExchangeServiceId" class="control-label"></label>

                            <select asp-for="Conditions[index].ExchangeServiceId" asp-items="Model.ExchangeServices" class="form-control exchange-input" data-index="@index"></select>
                               <a asp-controller="ExternalServices" asp-action="CreateExternalService" asp-route-selectedType="@ExchangeService.ExchangeServiceType">Create</a>
                            <span asp-validation-for="Conditions[index].ExchangeServiceId" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label asp-for="Conditions[index].MarketSymbol" class="control-label"></label>
                            <input asp-for="Conditions[index].MarketSymbol" class="form-control autocomplete" data-datasrc="availableMarketSymbols@(index)" placeholder="Start typing to see a list of available trading pairs"/>
                            <span asp-validation-for="Conditions[index].MarketSymbol" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label asp-for="Conditions[index].IsBuy" class="control-label"></label>
                            <input type="checkbox" asp-for="Conditions[index].IsBuy" class="form-check"/>
                            <span asp-validation-for="Conditions[index].IsBuy" class="text-danger"></span>
                        </div>
                    </div>
                    <div>
                        <button type="submit" name="action" value="@($"remove-item:{index}")" class="btn btn-danger">Remove</button>
                    </div>
                </div>
            }
            <div class="list-group-item ">
                <button type="submit" name="action" value="add-item" class="btn btn-secondary">Add</button>
            </div>
        }

    </div>


    <div class="mt-2">
        <button type="submit" class="btn btn-primary">Save</button>
        <a asp-action="GetServices" asp-controller="ExternalServices" class="btn btn-secondary">Back to recipe</a>
    </div>
</form>

<script>

var actionUrlMapping = @Json.Serialize(Model.ExchangeServices.ToDictionary(item => item.Value, item => @Url.Action("GetAvailableMarketSymbols", "PlaceOrder", new {ExternalServiceId = item.Value})));
for(var i = 0; i < 100; i++) {
    window["availableMarketSymbols" + i] =[];
}
$(document).ready(function(){
    $(".exchange-input").each(function(){
         populateAvailableMarketSymbols.bind(this)();
    })
    .on("input", populateAvailableMarketSymbols);
    function populateAvailableMarketSymbols(){
        var value =  $(this).val();
        var index = $(this).data("index");
        if(!value){
                    window["availableMarketSymbols" + index] =response;
        }else{
            $.ajax({
                url: actionUrlMapping[value],
                success: function(response){
                    window["availableMarketSymbols" + index] =response;
                },
                error: function(){                   
                    window["availableMarketSymbols" + index] = [];
                }       
            });
        }        
    }   
})
</script>